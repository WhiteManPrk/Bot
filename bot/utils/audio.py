import os
import asyncio
import subprocess
import logging
from typing import Optional, Callable
from pathlib import Path

logger = logging.getLogger(__name__)

class AudioError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ"""
    pass

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å
DownloadError = AudioError

async def extract_audio_ffmpeg(
    input_path: str, 
    output_dir: str, 
    progress_callback: Optional[Callable] = None
) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffmpeg
    
    Args:
        input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        progress_callback: Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Raises:
        AudioError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(input_path):
            raise AudioError(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(output_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        input_name = Path(input_path).stem
        output_path = os.path.join(output_dir, f"{input_name}.mp3")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(output_path):
            os.remove(output_path)
        
        if progress_callback:
            try:
                if asyncio.iscoroutinefunction(progress_callback):
                    await progress_callback("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...", 0)
                else:
                    progress_callback("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...", 0)
            except Exception as e:
                logger.warning(f"Progress callback failed: {e}")
        
        # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        cmd = [
            'ffmpeg',
            '-i', input_path,           # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-vn',                      # –û—Ç–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ
            '-acodec', 'libmp3lame',    # –ö–æ–¥–µ–∫ MP3
            '-b:a', '192k',             # –ë–∏—Ç—Ä–µ–π—Ç 192 kbps
            '-ar', '44100',             # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 44.1 kHz
            '-ac', '2',                 # –°—Ç–µ—Ä–µ–æ (2 –∫–∞–Ω–∞–ª–∞)
            '-y',                       # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            output_path
        ]
        
        logger.info(f"Running ffmpeg: {' '.join(cmd)}")
        
        if progress_callback:
            try:
                if asyncio.iscoroutinefunction(progress_callback):
                    await progress_callback("üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...", 50)
                else:
                    progress_callback("üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...", 50)
            except Exception as e:
                logger.warning(f"Progress callback failed: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if process.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else 'Unknown ffmpeg error'
            logger.error(f"FFmpeg failed with return code {process.returncode}: {error_msg}")
            raise AudioError(f"–û—à–∏–±–∫–∞ ffmpeg: {error_msg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(output_path):
            raise AudioError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(output_path)
        if file_size == 0:
            raise AudioError("–°–æ–∑–¥–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        if progress_callback:
            try:
                if asyncio.iscoroutinefunction(progress_callback):
                    await progress_callback("‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ", 100)
                else:
                    progress_callback("‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ", 100)
            except Exception as e:
                logger.warning(f"Progress callback failed: {e}")
        
        logger.info(f"Audio extraction successful: {output_path} ({file_size} bytes)")
        return output_path
        
    except AudioError:
        raise
    except Exception as e:
        logger.error(f"Unexpected error during audio extraction: {e}", exc_info=True)
        raise AudioError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def check_ffmpeg_availability() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ
    
    Returns:
        bool: True –µ—Å–ª–∏ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
        result = subprocess.run(
            ['ffmpeg', '-version'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=10
        )
        return result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError, OSError):
        return False

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async def init_audio_module():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –º–æ–¥—É–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    """
    logger.info("Initializing audio module...")
    
    if not check_ffmpeg_availability():
        logger.error("FFmpeg not found! Please install FFmpeg.")
        raise AudioError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ.")
    
    logger.info("Audio module initialized successfully")
