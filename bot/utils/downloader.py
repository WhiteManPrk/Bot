import os
import asyncio
import aiohttp
import yt_dlp
import subprocess
from typing import Optional, Tuple
import re
import tempfile
from pathlib import Path

class DownloadError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""
    pass

async def download_and_extract_audio(url: str, temp_dir: str, progress_callback=None) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ
    
    Returns:
        str: –ü—É—Ç—å –∫ MP3 —Ñ–∞–π–ª—É
    """
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path, title = await download_video(url, temp_dir, progress_callback)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        if progress_callback:
            await progress_callback("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
            
        audio_path = await extract_audio_ffmpeg(video_path, temp_dir)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        try:
            os.remove(video_path)
        except:
            pass
            
        return audio_path
        
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def extract_audio_ffmpeg(video_path: str, temp_dir: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        base_name = Path(video_path).stem
        audio_path = os.path.join(temp_dir, f"{base_name}.mp3")
        
        # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        cmd = [
            'ffmpeg', '-i', video_path,
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-acodec', 'libmp3lame',  # MP3 –∫–æ–¥–µ–∫
            '-ab', '192k',  # –ë–∏—Ç—Ä–µ–π—Ç 192 kbps
            '-ar', '44100',  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            audio_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            error_msg = stderr.decode('utf-8') if stderr else 'Unknown ffmpeg error'
            raise DownloadError(f"FFmpeg –æ—à–∏–±–∫–∞: {error_msg}")
            
        if not os.path.exists(audio_path):
            raise DownloadError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            
        return audio_path
        
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}")

async def download_video(url: str, temp_dir: str, progress_callback=None) -> Tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL"""
    try:
        os.makedirs(temp_dir, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
        if "disk.yandex" in url or "yadi.sk" in url:
            return await download_yandex_disk(url, temp_dir, progress_callback)
        elif "cloud.mail.ru/public" in url:
            return await download_mail_ru(url, temp_dir, progress_callback)
        else:
            return await download_with_ytdlp(url, temp_dir, progress_callback)
            
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")

async def download_yandex_disk(url: str, temp_dir: str, progress_callback=None) -> Tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        api_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key={url}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                if response.status == 200:
                    data = await response.json()
                    download_url = data.get('href')
                    if download_url:
                        return await download_direct_link(download_url, temp_dir, progress_callback)
                        
        # Fallback –Ω–∞ yt-dlp
        return await download_with_ytdlp(url, temp_dir, progress_callback)
        
    except Exception as e:
        # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp
        return await download_with_ytdlp(url, temp_dir, progress_callback)

async def download_mail_ru(url: str, temp_dir: str, progress_callback=None) -> Tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å Mail.ru - –∏—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –Ω–∞–ø—Ä—è–º—É—é"""
    return await download_with_ytdlp(url, temp_dir, progress_callback)

async def download_with_ytdlp(url: str, temp_dir: str, progress_callback=None) -> Tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp"""
    def progress_hook(d):
        if progress_callback and d['status'] == 'downloading':
            try:
                percent = d.get('_percent_str', 'N/A')
                speed = d.get('_speed_str', 'N/A')
                asyncio.create_task(progress_callback(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent} ({speed})"))
            except Exception:
                pass
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = int(asyncio.get_event_loop().time())
    output_template = os.path.join(temp_dir, f'video_{timestamp}_%(title)s.%(ext)s')
    
    ydl_opts = {
        'outtmpl': output_template,
        'format': 'best[ext=mp4]/best[ext=webm]/best',  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º mp4
        'progress_hooks': [progress_hook],
        'no_warnings': False,
        'extractaudio': False,  # –ú—ã –±—É–¥–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        'embed_subs': False,
        'writesubtitles': False,
        'writeautomaticsub': False,
        'ignoreerrors': False,
    }
    
    try:
        loop = asyncio.get_event_loop()
        
        def run_ytdl():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                title = info.get('title', 'video')
                filename = ydl.prepare_filename(info)
                ydl.download([url])
                return filename, title
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º yt-dlp –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        filename, title = await loop.run_in_executor(None, run_ytdl)
        
        if os.path.exists(filename):
            return filename, title
        else:
            raise DownloadError("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω")
            
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ yt-dlp: {str(e)}")

async def download_direct_link(url: str, temp_dir: str, progress_callback=None) -> Tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = url.split('/')[-1].split('?')[0]
        if not filename or '.' not in filename:
            filename = 'video.mp4'
            
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = int(asyncio.get_event_loop().time())
        name, ext = os.path.splitext(filename)
        filename = f"{name}_{timestamp}{ext}"
        
        filepath = os.path.join(temp_dir, filename)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    total_size = int(response.headers.get('content-length', 0))
                    downloaded = 0
                    
                    with open(filepath, 'wb') as f:
                        async for chunk in response.content.iter_chunked(8192):
                            f.write(chunk)
                            downloaded += len(chunk)
                            
                            if progress_callback and total_size > 0:
                                percent = (downloaded / total_size) * 100
                                await progress_callback(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent:.1f}%")
                    
                    return filepath, name
                else:
                    raise DownloadError(f"HTTP {response.status}")
                    
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async def process_uploaded_file(file_path: str, temp_dir: str, progress_callback=None) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    try:
        if progress_callback:
            await progress_callback("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            
        return await extract_audio_ffmpeg(file_path, temp_dir)
        
    except Exception as e:
        raise DownloadError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
