import asyncio
import logging
import os
import tempfile
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, BufferedInputFile
import aiofiles

from .utils.downloader import download_video, DownloadError
from .utils.audio import extract_audio_ffmpeg, DownloadError as AudioError
from .config import BOT_TOKEN, TEMP_DIR, MAX_FILE_SIZE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéµ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ</b>\n\n"
        "üìπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Yandex Disk, –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏)\n"
        "‚Ä¢ –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é\n\n"
        "üéß –Ø –∏–∑–≤–ª–µ–∫—É –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ MP3 —Ñ–∞–π–ª\n\n"
        "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
        "‚úÖ YouTube\n"
        "‚úÖ Yandex Disk\n" 
        "‚úÖ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ\n"
        "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
        "‚ùå –î–ª—è VK, Instagram, TikTok - –∑–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é"
    )
    await message.answer(welcome_text)

@dp.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª\n"
        "2. –î–æ–∂–¥–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "3. –ü–æ–ª—É—á–∏ MP3 —Ñ–∞–π–ª\n\n"
        "<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE // (1024*1024)} –ú–ë\n"
        "‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(help_text)

@dp.message(lambda message: message.text and (
    message.text.startswith('http://') or 
    message.text.startswith('https://')
))
async def url_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL —Å—Å—ã–ª–æ–∫"""
    url = message.text.strip()
    logger.info(f"Processing URL: {url}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_temp_dir = os.path.join(TEMP_DIR, f"user_{message.from_user.id}")
        os.makedirs(user_temp_dir, exist_ok=True)
        
        # Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def on_progress(stage: str, percent: float = 0):
            try:
                text = f"{stage}"
                if percent > 0:
                    text += f" {percent:.1f}%"
                
                await status_msg.edit_text(text)
                
            except Exception as e:
                logger.warning(f"Progress update failed: {e}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await on_progress("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
        video_path, title = await download_video(url, user_temp_dir, on_progress)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        await on_progress("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        audio_path = await extract_audio_ffmpeg(video_path, user_temp_dir)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        audio_size = os.path.getsize(audio_path)
        if audio_size > MAX_FILE_SIZE:
            await status_msg.edit_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({audio_size // (1024*1024)} –ú–ë). "
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE // (1024*1024)} –ú–ë"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        await on_progress("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        async with aiofiles.open(audio_path, 'rb') as audio_file:
            audio_data = await audio_file.read()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).strip()
        filename = f"{safe_title[:50]}.mp3" if safe_title else "audio.mp3"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        audio_file = BufferedInputFile(audio_data, filename=filename)
        await message.answer_audio(
            audio=audio_file,
            title=title,
            caption=f"üéµ <b>{title}</b>\n\nüìä –†–∞–∑–º–µ—Ä: {audio_size // 1024} –ö–ë"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.delete()
        
    except DownloadError as e:
        logger.error(f"Download error: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{str(e)}")
    except AudioError as e:
        logger.error(f"Audio extraction error: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ:\n{str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            import shutil
            if os.path.exists(user_temp_dir):
                shutil.rmtree(user_temp_dir)
        except Exception as e:
            logger.warning(f"Cleanup failed: {e}")

@dp.message(lambda message: message.video or message.document)
async def video_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    logger.info(f"Processing uploaded file from user {message.from_user.id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_obj = message.video or message.document
    
    if not file_obj:
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_obj.file_size and file_obj.file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_obj.file_size // (1024*1024)} –ú–ë). "
            f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE // (1024*1024)} –ú–ë"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await message.answer("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        user_temp_dir = os.path.join(TEMP_DIR, f"user_{message.from_user.id}")
        os.makedirs(user_temp_dir, exist_ok=True)
        
        # Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def on_progress(stage: str, percent: float = 0):
            try:
                text = f"{stage}"
                if percent > 0:
                    text += f" {percent:.1f}%"
                
                await status_msg.edit_text(text)
                
            except Exception as e:
                logger.warning(f"Progress update failed: {e}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        await on_progress("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
        file = await bot.get_file(file_obj.file_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = ""
        if file_obj.file_name:
            file_extension = Path(file_obj.file_name).suffix
        elif file_obj.mime_type:
            if "mp4" in file_obj.mime_type:
                file_extension = ".mp4"
            elif "avi" in file_obj.mime_type:
                file_extension = ".avi"
            elif "webm" in file_obj.mime_type:
                file_extension = ".webm"
            else:
                file_extension = ".mp4"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            file_extension = ".mp4"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        video_path = os.path.join(user_temp_dir, f"uploaded_{file_obj.file_unique_id}{file_extension}")
        await bot.download_file(file.file_path, video_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        await on_progress("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        audio_path = await extract_audio_ffmpeg(video_path, user_temp_dir)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        audio_size = os.path.getsize(audio_path)
        if audio_size > MAX_FILE_SIZE:
            await status_msg.edit_text(
                f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({audio_size // (1024*1024)} –ú–ë). "
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE // (1024*1024)} –ú–ë"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        await on_progress("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ...")
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        async with aiofiles.open(audio_path, 'rb') as audio_file:
            audio_data = await audio_file.read()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        original_name = file_obj.file_name or "video"
        safe_name = "".join(c for c in original_name if c.isalnum() or c in (' ', '-', '_')).strip()
        filename = f"{Path(safe_name).stem}.mp3" if safe_name else "audio.mp3"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        audio_file = BufferedInputFile(audio_data, filename=filename)
        await message.answer_audio(
            audio=audio_file,
            title=Path(original_name).stem,
            caption=f"üéµ <b>–ê—É–¥–∏–æ –∏–∑ {original_name}</b>\n\nüìä –†–∞–∑–º–µ—Ä: {audio_size // 1024} –ö–ë"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.delete()
        
    except AudioError as e:
        logger.error(f"Audio extraction error: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ:\n{str(e)}")
    except Exception as e:
        logger.error(f"Video processing failed: {e}", exc_info=True)
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            import shutil
            if os.path.exists(user_temp_dir):
                shutil.rmtree(user_temp_dir)
        except Exception as e:
            logger.warning(f"Cleanup failed: {e}")

@dp.message()
async def unknown_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "üîó –°—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        "üìÅ –í–∏–¥–µ–æ —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(TEMP_DIR, exist_ok=True)
    
    logger.info("Starting Telegram Audio Extractor Bot...")
    logger.info(f"Temp directory: {TEMP_DIR}")
    logger.info(f"Max file size: {MAX_FILE_SIZE // (1024*1024)} MB")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"Bot failed: {e}", exc_info=True)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
